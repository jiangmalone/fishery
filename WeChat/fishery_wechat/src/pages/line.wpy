<style lang="less">
.line{
  .mask{
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
    background: #000;
    z-index: 9000;
    opacity: 0.7;
  }
  .modalDlg{
    width: 670rpx;
    position: fixed;
    top: 50%;
    left: 0;
    z-index: 9999;
    margin: -400rpx 40rpx;
    background-color: #fff;
    border-radius: 16rpx;
    font-size: 32rpx;
    .close{
      width: 72rpx;
      height: 72rpx;
      border-radius: 36rpx;
      position: absolute;
      top: -92rpx;
      right:18rpx;
      .closeimg{
        width: 72rpx;
        height: 72rpx;
      }
      .closeline{
        width: 4rpx;
        height: 20rpx;
        background-color: #fff;
        position: absolute;
        top:72rpx;
        left: 36rpx;
      }
    }
    .checkbox-item{
      height: 100rpx;
      line-height: 100rpx;
      border-bottom: 2rpx solid #D4D5D8;
      image{
        width: 44rpx;
        height: 44rpx;
        margin-left: 226rpx;
        margin-right: 20rpx;
        margin-top: 28rpx;
        position: relative;
        top:8rpx;
      }
      .select{
        color:#2F70B8;
      }
    }
    .modal-but{
      width: 480rpx;
      height: 90rpx;
      line-height: 90rpx;
      background: #2F70B8;
      color: #fff;
      font-size: 32rpx;
      border-radius: 120rpx;
      margin-top: 40rpx;
      margin-bottom: 40rpx;
    }
  }
  font-size: 30rpx;
  color: #4E4E4E;
  .header{
    border: 2rpx solid #E6E6E6;
    position: relative;
    .sensorname{
      width: 348rpx;
      height: 60rpx;
      font-size: 28rpx;
      display: inline-block;
      background-color: #F2F2F2;
      position: relative;
      text-align: center;
      border-radius: 124rpx;
      line-height: 60rpx;
      padding-right: 30rpx;
      margin-left: 30rpx;
      margin-top: 32rpx;
      margin-bottom: 26rpx;
      overflow: hidden;
    }
    .header-img{
      width:30rpx;
      height:20rpx;
      display: inline-block;
      position: absolute;
      float: right;
      margin-top: 20rpx;
      margin-bottom: 50rpx;
      right: 20rpx;
      /*position: relative;*/
      /*top: -45rpx;*/
      /*left: -40rpx;*/
    }
    .status{
      line-height: 60rpx;
      margin-right: 30rpx;
      margin-top: 32rpx;
      margin-bottom: 26rpx;
      float: right;
      .status-dot{
        display: inline-block;
        width: 16rpx;
        height: 16rpx;
        border-radius: 8rpx;
        margin-right: 10rpx;
        background-color: #FFC06B;
      }
    }
    .andmore{
      float: right;
      margin-top: 44rpx;
      margin-right: 20rpx;
    }
  }
  .content{
    .cot-name{
      padding: 34rpx;
      .time{
        color: #B5B5B5;
        float: right;
      }
    }
    .cot{
      font-size: 28rpx;
      .cot-index{
        display: inline-block;
        .target{
          width: 208rpx;
          height: 220rpx;
          margin: 18rpx;
          box-shadow: 0 4rpx 16rpx 0 rgba(225,225,225,0.50);
          border-radius: 16rpx;
          .o2{
            width:80rpx;
            height:80rpx;
            margin-left: 70rpx;
            margin-top: 46rpx;
          }
          .ph{
            width:65rpx;
            height:115rpx;
            margin-left: 70rpx;
            margin-top: 34rpx;
          }
          .data{
            padding-top: 20rpx;
            text-align: center;
          }
          .data1{
            padding-top: 8rpx;
            text-align: center;
          }
        }
        .res{
          position: relative;
          left: 104rpx;
        }
      }
    }
    .cut{
      margin-top: 20rpx;
      height: 40rpx;
      background-color: #F2F2F2;
    }
  }
  .line{
    .line-but{
      padding: 60rpx;
      .but-index{
        width: 176rpx;
        height: 60rpx;
        margin-left: 90rpx;
        display: inline-block;
        line-height: 60rpx;
        text-align: center;
        border-radius: 200rpx;
      }
      .choosebtn{
        border: 2rpx solid #2F70B8;
      }
      .unchoose{
        border: 2rpx solid #dcdcdc;
      }
    }
  }
  .cha{
    position: relative;
    height: 518rpx;
    width: 698rpx;
    background: #f9f9f9;
    margin: 30rpx;
    view{
      position: absolute;
      top: 30rpx;
      left: 30rpx;
      color: #6c737c;
    }
    image{
      height: 35rpx;
      width: 35rpx;
      /*margin: 25rpx 0 0 25rpx;*/
    }
  }
  ec-canvas {
    width: 698rpx;
    height: 518rpx;
  }
  .green{
    color:#00cf9b;
  }
  .orange{
    color:#FFC06B;
  }
}
</style>
<template>
  <view class="line">
    <view class="header">
      <view class="sensorname" @tap="showModal">{{tangkoulist[ind].pondname}}<image class="header-img" src="../images/gd_7_copy@2x.png" style="width:30rpx;height:20rpx;"></image></view>
      <view class="{{realTimeDataInfo.oxygen_status!==0?'status orange':(realTimeDataInfo.wt_status!==0?'status orange':(realTimeDataInfo.pH_status!==0?'status orange':'status green'))}}">
        {{realTimeDataInfo.oxygen_status!==0?' ● 异常':(realTimeDataInfo.wt_status!==0?' ● 异常':(realTimeDataInfo.pH_status!==0?' ● 异常':' ● 正常'))}}
      </view>
    </view>
    <view class="content">
      <view class="cot-name">
        <text>{{realTimeDataInfo.name}}-数据指标</text>
        <text class="time">{{time}}</text>
      </view>
      <view class="cot">
        <view class="cot-index">
          <view class="target">
            <image class="o2" src="../images/o_3_copy.png"></image>
            <view class="data">溶氧 {{realTimeDataInfo.oxygen}}mg/L</view>
          </view>
          <view class="res">{{realTimeDataInfo.oxygen===0?'离线':(realTimeDataInfo.oxygen_status===2?'危险': (realTimeDataInfo.oxygen_status===1?'预警':'正常'))}}</view>
        </view>
        <view class="cot-index">
          <view class="target">
            <image class="o2" src="../images/w@2x.png"></image>
            <view class="data">水温 {{realTimeDataInfo.water_temperature}}℃</view>
          </view>
          <view class="res">{{realTimeDataInfo.water_temperature===0?'离线':(realTimeDataInfo.wt_status===2?'危险': (realTimeDataInfo.wt_status===1?'预警':'正常'))}}</view>
        </view>
        <view class="cot-index">
          <view class="target">
            <image class="ph" src="../images/ph@2x.png"></image>
            <view class="data1">PH {{realTimeDataInfo.pH_value}}</view>
          </view>
          <view class="res">{{realTimeDataInfo.pH_value===0?'离线':(realTimeDataInfo.pH_status===2?'危险': (realTimeDataInfo.pH_status===1?'预警':'正常'))}}</view>
        </view>
        <view class="cut"></view>
      </view>
    </view>
    <view class="line">
      <view class="line-but">
        <view class="{{chooseToday?'but-index choosebtn':'but-index unchoose'}}" @tap="switchToday">今日</view>
        <view class="{{chooseToday?'but-index unchoose':'but-index choosebtn'}}" @tap="switch3day">三日</view>
      </view>
    </view>

    <view>
      <view class="cha">
        <view><image src="../images/o_3_copy@2x.png"></image>溶氧变化曲线</view>
        <mychart :ec="echarts" id="bar" :onInit="barInit" canvasId='aaa' />
      </view>
      <view class="cha">
        <view><image src="../images/wd_copy@2x.png"></image>水温变化曲线</view>
        <mychartb :ec="echarts" id="line" :onInit="lineInit" canvasId='bbb' />
      </view>
      <view class="cha">
        <view><image src="../images/o_2_copy 2@2x.png"></image>PH值变化曲线</view>
        <mychartc :ec="echarts" id="ph" :onInit="phInit" canvasId='ccc' />
      </view>
    </view>

    <!--模态框的遮罩层-->
    <view class="mask" catchtouchmove="preventTouchMove" wx:if="{{showModal}}"></view>
    <!--模态框-->
    <view class="modalDlg" wx:if="{{showModal}}">
      <view class="close" @tap="closemodal">
        <image class="closeimg" src="../images/n_cross80@2x.png"></image>
        <view class="closeline"></view>
      </view>
      <repeat for="{{tangkoulist}}" key="index" index="index">
        <view class="checkbox-item" data-selectindex="{{index}}" data-pondid="{{item.id}}" data-pond="{{item.pondname}}" @tap="selectRep">
          <view class="{{ind === index ? 'select' : ''}}">
            <image src="{{ind === index ? selectImage : noselectImage}}"></image><text>{{item.pondname}}</text>
          </view>
        </view>
      </repeat>
      <button wx:if="{{tangkoulist.length !== 0}}" class="modal-but" @tap="chooseTK">确定</button>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import * as echarts from './ec-canvas/echarts'
  import Echarts from './echarts/echart'
  import Echartsb from './echarts/echart2'
  import Echartsc from './echarts/echart3'

  let myChart, myChartb, myChartc

  function getBarOption() {
    return {
      color: ['#37a2da', '#32c5e9', '#67e0e3'],
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          // 坐标轴指示器，坐标轴触发有效
          type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
        }
      },
      legend: {
        data: []
      },
      xAxis: [
        {
          type: 'value',
          axisLine: {
            lineStyle: {
              color: '#999'
            }
          },
          axisLabel: {
            color: '#666'
          }
        }
      ],
      yAxis: [
        {
          type: 'category',
          axisTick: { show: false },
          data: [],
          axisLine: {
            lineStyle: {
              color: '#999'
            }
          },
          axisLabel: {
            color: '#666'
          }
        }
      ],
      series: [
        {
          name: '热度',
          type: 'bar',
          label: {
            normal: {
              show: true,
              position: 'inside'
            }
          },
          data: []
        },
        {
          name: '正面',
          type: 'bar',
          stack: '总量',
          label: {
            normal: {
              show: true
            }
          },
          data: []
        },
        {
          name: '负面',
          type: 'bar',
          stack: '总量',
          label: {
            normal: {
              show: true,
              position: 'left'
            }
          },
          data: []
        }
      ]
    }
  }
  function getLineOption() {
    return {
      xAxis: {
        type: 'category',
        data: []
      },
      yAxis: {
        type: 'value'
      },
      series: [
        {
          data: [],
          type: 'line'
        }
      ]
    }
  }
  function getphOption() {
    return {
      xAxis: {
        type: 'category',
        data: []
      },
      yAxis: {
        type: 'value'
      },
      series: [
        {
          data: [],
          type: 'line'
        }
      ]
    }
  }

export default class Line extends wepy.page {
    components = {
      mychart: Echarts,
      mychartb: Echartsb,
      mychartc: Echartsc
    }
    data = {
      switchToday: false,
      showModal: false,
      time: '',
      ind: 0,
      temporarilyInd: 0,
      tangkoulist: [],
      chooseToday: true,
      realTimeDataInfo: [],
      selectImage: '../images/_14_copy@2x.png',
      noselectImage: '../images/_14_copy 2@2x.png',
      echarts,

      barInit: function(canvas, width, height) {
        console.log('initializing charta......')
        myChart = echarts.init(canvas, null, {
          width: width,
          height: height
        })
        canvas.setChart(myChart)
        myChart.setOption(getBarOption())
        return myChart
      },

      lineInit: function(canvas, width, height) {
        console.log('initializing chartb......')
        myChartb = echarts.init(canvas, null, {
          width: width,
          height: height
        })
        canvas.setChart(myChartb)
        myChartb.setOption(getLineOption())
        return myChartb
      },

      phInit: function(canvas, width, height) {
        console.log('initializing chartc......')
        myChartc = echarts.init(canvas, null, {
          width: width,
          height: height
        })
        canvas.setChart(myChartb)
        myChartc.setOption(getphOption())
        return myChartc
      }

    }
    methods = {
      switchToday() {
        this.chooseToday = true
        let deviceSn = this.tangkoulist[this.ind].sensorlist[0].sensor.device_sn
        wepy.showLoading()
        wepy.request({
          url: this.$parent.globalData.baseUrl + 'api/' + 'equipment/dataToday',
          data: {
            device_sn: deviceSn,
            way: 1
          },
          method: 'GET',
          success: res => {
            let optionO = {
              textStyle: {
                color: '#c4c4c4'
              },
              animation: false,
              color: ['#8dc1aa'],
              xAxis: [{
                type: 'category',
                boundaryGap: false,
                data: res.data.DO.at,
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitNumber: 3,
                axisLabel: {
                  formatter: function (value) {
                    return echarts.format.formatTime('hh:mm\nMM-dd', value)
                  },
                  interval: function(index, value) {
                    let time = echarts.format.formatTime('hh:mm', value)
                    switch (time) {
                      case '00:00' : return true
                      case '03:00' : return true
                      case '06:00' : return true
                      case '09:00' : return true
                      case '12:00' : return true
                      case '15:00' : return true
                      case '21:00' : return true
                      case '18:00' : return true
                      case '24:00' : return true
                      default : return false
                    }
                  }
                },
                splitLine: {
                  show: false
                }
              }],
              yAxis: [{
                type: 'value',
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitLine: {
                  lineStyle: {
                    color: '#e9e7de',
                    type: 'dashed'
                  }
                },
              }],
              series: [{
                lineStyle: {
                  color: '#2c90f7',
                  type: 'solid'
                },
                type: 'line',
                smooth: true,
                data: res.data.DO.value,
                markLine: {
                  symbol: '',
                  itemStyle: {
                    lineStyle: {type: 'solid'},
                    label: {show: true, position: 'left', formatter: 'aaa'}
                  },
                  data: [
                    { yAxis: res.data.Limit?res.data.Limit.low_limit:4,
                      label: {
                        show: true,
                        formatter: '下限',
                        color: '#beac00'
                      },
                      itemStyle: {
                        color: '#beac00'
                      }
                    },
                    { yAxis: res.data.Limit?res.data.Limit.up_limit:6,
                      label: {
                        show: true,
                        formatter: '上限',
                        color: '#45795b'
                      },
                      itemStyle: {
                        color: '#45795b'
                      }
                    },
                    { yAxis: res.data.Limit?res.data.Limit.high_limit:20,
                      label: {
                        show: true,
                        formatter: '高限',
                        color: '#b3675b'
                      },
                      itemStyle: {
                        color: '#b3675b'
                      }
                    }
                  ]
                }
              }]
            }
            let optionWT = {
              textStyle: {
                color: '#c4c4c4'
              },
              animation: false,
              color: ['#8dc1aa'],
              xAxis: [{
                type: 'category',
                boundaryGap: false,
                data: res.data.WT.at,
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitNumber: 3,
                axisLabel: {
                  formatter: function (value) {
                    return echarts.format.formatTime('hh:mm\nMM-dd', value)
                  },
                  interval: function(index, value) {
                    let time = echarts.format.formatTime('hh:mm', value)
                    switch (time) {
                      case '00:00' : return true
                      case '03:00' : return true
                      case '06:00' : return true
                      case '21:00' : return true
                      case '09:00' : return true
                      case '12:00' : return true
                      case '15:00' : return true
                      case '18:00' : return true
                      case '24:00' : return true
                      default : return false
                    }
                  }
                },
                splitLine: {
                  show: false
                }
              }],
              yAxis: [{
                type: 'value',
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitLine: {
                  lineStyle: {
                    color: '#e9e7de',
                    type: 'dashed'
                  }
                },
              }],
              series: [{
                lineStyle: {
                  color: '#ff8e2d',
                  type: 'solid'
                },
                type: 'line',
                smooth: true,
                data: res.data.WT.value
              }]
            }
            let optionPH = {
              textStyle: {
                color: '#c4c4c4'
              },
              animation: false,
              color: ['#8dc1aa'],
              xAxis: [{
                type: 'category',
                boundaryGap: false,
                data: res.data.pH.at,
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitNumber: 3,
                axisLabel: {
                  formatter: function (value) {
                    return echarts.format.formatTime('hh:mm\nMM-dd', value)
                  },
                  interval: function(index, value) {
                    let time = echarts.format.formatTime('hh:mm', value)
                    switch (time) {
                      case '00:00' : return true
                      case '03:00' : return true
                      case '06:00' : return true
                      case '09:00' : return true
                      case '12:00' : return true
                      case '15:00' : return true
                      case '21:00' : return true
                      case '18:00' : return true
                      case '24:00' : return true
                      default : return false
                    }
                  }
                },
                splitLine: {
                  show: false
                }
              }],
              yAxis: [{
                type: 'value',
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitLine: {
                  lineStyle: {
                    color: '#e9e7de',
                    type: 'dashed'
                  }
                },
              }],
              series: [{
                lineStyle: {
                  color: '#18b0c5',
                  type: 'solid'
                },
                type: 'line',
                smooth: true,
                data: res.data.pH.value
              }]
            }
            myChart.setOption(optionO, true)
            myChartb.setOption(optionWT, true)
            myChartc.setOption(optionPH, true)
          },
          complete: () => {
            wepy.hideLoading()
          }
        })
      },
      switch3day() {
        this.chooseToday = false
        let deviceSn = this.tangkoulist[this.ind].sensorlist[0].sensor.device_sn
        wepy.showLoading()
        wepy.request({
          url: this.$parent.globalData.baseUrl + 'api/' + 'equipment/data3days',
          data: {
            device_sn: deviceSn,
            way: 1
          },
          method: 'GET',
          success: res => {
            let optionO = {
              textStyle: {
                color: '#c4c4c4'
              },
              animation: false,
              color: ['#8dc1aa'],
              xAxis: [{
                type: 'category',
                boundaryGap: false,
                data: res.data.DO.at,
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitNumber: 3,
                axisLabel: {
                  formatter: function (value) {
                    return echarts.format.formatTime('MM-dd\nyyyy', value)
                  },
                  interval: function(index, value) {
                    let time = echarts.format.formatTime('hh:mm', value)
                    switch (time) {
                      case '00:00' : return true
                      case '12:00' : return true
                      default : return false
                    }
                  }
                },
                splitLine: {
                  show: false
                }
              }],
              yAxis: [{
                type: 'value',
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitLine: {
                  lineStyle: {
                    color: '#e9e7de',
                    type: 'dashed'
                  }
                },
              }],
              series: [{
                lineStyle: {
                  color: '#2c90f7',
                  type: 'solid'
                },
                type: 'line',
                smooth: true,
                data: res.data.DO.value,
                markLine: {
                  symbol: '',
                  itemStyle: {
                    lineStyle: {type: 'solid'},
                    label: {show: true, position: 'left', formatter: 'aaa'}
                  },
                  data: [
                    { yAxis: res.data.Limit?res.data.Limit.low_limit:4,
                      label: {
                        show: true,
                        formatter: '下限',
                        color: '#beac00'
                      },
                      itemStyle: {
                        color: '#beac00'
                      }
                    },
                    { yAxis: res.data.Limit?res.data.Limit.up_limit:6,
                      label: {
                        show: true,
                        formatter: '上限',
                        color: '#45795b'
                      },
                      itemStyle: {
                        color: '#45795b'
                      }
                    },
                    { yAxis: res.data.Limit?res.data.Limit.high_limit:20,
                      label: {
                        show: true,
                        formatter: '高限',
                        color: '#b3675b'
                      },
                      itemStyle: {
                        color: '#b3675b'
                      }
                    }
                  ]
                }
              }]
            }
            let optionWT = {
              textStyle: {
                color: '#c4c4c4'
              },
              animation: false,
              color: ['#8dc1aa'],
              xAxis: [{
                type: 'category',
                boundaryGap: false,
                data: res.data.WT.at,
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitNumber: 3,
                axisLabel: {
                  formatter: function (value) {
                    return echarts.format.formatTime('MM-dd\nyyyy', value)
                  },
                  interval: function(index, value) {
                    let time = echarts.format.formatTime('hh:mm', value)
                    switch (time) {
                      case '00:00' : return true
                      case '12:00' : return true
                      default : return false
                    }
                  }
                },
                splitLine: {
                  show: false
                }
              }],
              yAxis: [{
                type: 'value',
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitLine: {
                  lineStyle: {
                    color: '#e9e7de',
                    type: 'dashed'
                  }
                },
              }],
              series: [{
                lineStyle: {
                  color: '#ff8e2d',
                  type: 'solid'
                },
                type: 'line',
                smooth: true,
                data: res.data.WT.value
              }]
            }
            let optionPH = {
              textStyle: {
                color: '#c4c4c4'
              },
              animation: false,
              color: ['#8dc1aa'],
              xAxis: [{
                type: 'category',
                boundaryGap: false,
                data: res.data.pH.at,
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitNumber: 3,
                axisLabel: {
                  formatter: function (value) {
                    return echarts.format.formatTime('MM-dd\nyyyy', value)
                  },
                  interval: function(index, value) {
                    let time = echarts.format.formatTime('hh:mm', value)
                    switch (time) {
                      case '00:00' : return true
                      case '12:00' : return true
                      default : return false
                    }
                  }
                },
                splitLine: {
                  show: false
                }
              }],
              yAxis: [{
                type: 'value',
                axisLine: {
                  lineStyle: {
                    color: '#c4c4c4'
                  }
                },
                splitLine: {
                  lineStyle: {
                    color: '#e9e7de',
                    type: 'dashed'
                  }
                },
              }],
              series: [{
                lineStyle: {
                  color: '#18b0c5',
                  type: 'solid'
                },
                type: 'line',
                smooth: true,
                data: res.data.pH.value
              }]
            }
            myChart.setOption(optionO, true)
            myChartb.setOption(optionWT, true)
            myChartc.setOption(optionPH, true)
          },
          complete: () => {
            wepy.hideLoading()
          }
        })
      },
      showModal() {
        this.showModal = true
      },
      selectRep(e) {
        this.temporarilyInd = e.currentTarget.dataset.selectindex
      },
      chooseTK() {
        this.ind = this.temporarilyInd
        if (this.tangkoulist[this.ind].sensorlist.length > 0) {
          this.chooseToday = true
          this.showModal = false
          let deviceSn = this.tangkoulist[this.ind].sensorlist[0].sensor.device_sn
//          wepy.closeSocket()
//          wepy.onSocketClose((res)=> {
//            console.log('WebSocket 已关闭！', res)
//          })
//          wepy.connectSocket({
//            url: 'wss://www.fisherymanager.net/websocket'
//          })
//          let relation = this.$parent.globalData.relation
//          wepy.onSocketOpen((res) => {
//            console.log('WebSocket连接已打开！' + res.data)
//            wepy.sendSocketMessage({
//              data: relation
//            })
//          })
//
//          wepy.onSocketMessage((res) => {
//            console.log('收到服务器内容：' + res.data)
//            this.realTimeDataInfo = JSON.parse(res.data)
//            // yyyy/mm/dd
//            let nowDate = new Date()
//            let year = nowDate.getFullYear()
//            let month = nowDate.getMonth() + 1 < 10 ? '0' + (nowDate.getMonth() + 1)
//              : nowDate.getMonth() + 1
//            let day = nowDate.getDate() < 10 ? '0' + nowDate.getDate() : nowDate
//              .getDate()
//            let hour = nowDate.getHours()
//            let min = nowDate.getMinutes() < 10 ? '0' + nowDate.getMinutes() : nowDate.getMinutes()
//            let dateStr = year + '/' + month + '/' + day + ' ' + hour + ':' + min
//            this.time = dateStr
//            console.log(this.time)
//            this.$apply()
//          })
          wepy.showLoading()
          wepy.request({
            url: this.$parent.globalData.baseUrl + 'api/' + 'equipment/dataToday',
            data: {
              device_sn: deviceSn,
              way: 1
            },
            method: 'GET',
            success: res => {
              let optionO = {
                textStyle: {
                  color: '#c4c4c4'
                },
                animation: false,
                color: ['#8dc1aa'],
                xAxis: [{
                  type: 'category',
                  boundaryGap: false,
                  data: res.data.DO.at,
                  axisLine: {
                    lineStyle: {
                      color: '#c4c4c4'
                    }
                  },
                  splitNumber: 3,
                  axisLabel: {
                    formatter: function (value) {
                      return echarts.format.formatTime('hh:mm\nMM-dd', value)
                    },
                    interval: function(index, value) {
                      let time = echarts.format.formatTime('hh:mm', value)
                      switch (time) {
                        case '00:00' : return true
                        case '03:00' : return true
                        case '06:00' : return true
                        case '09:00' : return true
                        case '12:00' : return true
                        case '15:00' : return true
                        case '21:00' : return true
                        case '18:00' : return true
                        case '24:00' : return true
                        default : return false
                      }
                    }
                  },
                  splitLine: {
                    show: false
                  }
                }],
                yAxis: [{
                  type: 'value',
                  axisLine: {
                    lineStyle: {
                      color: '#c4c4c4'
                    }
                  },
                  splitLine: {
                    lineStyle: {
                      color: '#e9e7de',
                      type: 'dashed'
                    }
                  },
                }],
                series: [{
                  lineStyle: {
                    color: '#2c90f7',
                    type: 'solid'
                  },
                  type: 'line',
                  smooth: true,
                  data: res.data.DO.value,
                  markLine: {
                    symbol: '',
                    itemStyle: {
                      lineStyle: {type: 'solid'},
                      label: {show: true, position: 'left', formatter: 'aaa'}
                    },
                    data: [
                      { yAxis: res.data.Limit?res.data.Limit.low_limit:4,
                        label: {
                          show: true,
                          formatter: '下限',
                          color: '#beac00'
                        },
                        itemStyle: {
                          color: '#beac00'
                        }
                      },
                      { yAxis: res.data.Limit?res.data.Limit.up_limit:6,
                        label: {
                          show: true,
                          formatter: '上限',
                          color: '#45795b'
                        },
                        itemStyle: {
                          color: '#45795b'
                        }
                      },
                      { yAxis: res.data.Limit?res.data.Limit.high_limit:20,
                        label: {
                          show: true,
                          formatter: '高限',
                          color: '#b3675b'
                        },
                        itemStyle: {
                          color: '#b3675b'
                        }
                      }
                    ]
                  }
                }]
              }
              let optionWT = {
                textStyle: {
                  color: '#c4c4c4'
                },
                animation: false,
                color: ['#8dc1aa'],
                xAxis: [{
                  type: 'category',
                  boundaryGap: false,
                  data: res.data.WT.at,
                  axisLine: {
                    lineStyle: {
                      color: '#c4c4c4'
                    }
                  },
                  splitNumber: 3,
                  axisLabel: {
                    formatter: function (value) {
                      return echarts.format.formatTime('hh:mm\nMM-dd', value)
                    },
                    interval: function(index, value) {
                      let time = echarts.format.formatTime('hh:mm', value)
                      switch (time) {
                        case '00:00' : return true
                        case '03:00' : return true
                        case '06:00' : return true
                        case '09:00' : return true
                        case '12:00' : return true
                        case '15:00' : return true
                        case '18:00' : return true
                        case '21:00' : return true
                        case '24:00' : return true
                        default : return false
                      }
                    }
                  },
                  splitLine: {
                    show: false
                  }
                }],
                yAxis: [{
                  type: 'value',
                  axisLine: {
                    lineStyle: {
                      color: '#c4c4c4'
                    }
                  },
                  splitLine: {
                    lineStyle: {
                      color: '#e9e7de',
                      type: 'dashed'
                    }
                  },
                }],
                series: [{
                  lineStyle: {
                    color: '#ff8e2d',
                    type: 'solid'
                  },
                  type: 'line',
                  smooth: true,
                  data: res.data.WT.value
                }]
              }
              let optionPH = {
                textStyle: {
                  color: '#c4c4c4'
                },
                animation: false,
                color: ['#8dc1aa'],
                xAxis: [{
                  type: 'category',
                  boundaryGap: false,
                  data: res.data.pH.at,
                  axisLine: {
                    lineStyle: {
                      color: '#c4c4c4'
                    }
                  },
                  splitNumber: 3,
                  axisLabel: {
                    formatter: function (value) {
                      return echarts.format.formatTime('hh:mm\nMM-dd', value)
                    },
                    interval: function(index, value) {
                      let time = echarts.format.formatTime('hh:mm', value)
                      switch (time) {
                        case '00:00' : return true
                        case '03:00' : return true
                        case '06:00' : return true
                        case '09:00' : return true
                        case '12:00' : return true
                        case '15:00' : return true
                        case '21:00' : return true
                        case '18:00' : return true
                        case '24:00' : return true
                        default : return false
                      }
                    }
                  },
                  splitLine: {
                    show: false
                  }
                }],
                yAxis: [{
                  type: 'value',
                  axisLine: {
                    lineStyle: {
                      color: '#c4c4c4'
                    }
                  },
                  splitLine: {
                    lineStyle: {
                      color: '#e9e7de',
                      type: 'dashed'
                    }
                  },
                }],
                series: [{
                  lineStyle: {
                    color: '#18b0c5',
                    type: 'solid'
                  },
                  type: 'line',
                  smooth: true,
                  data: res.data.pH.value
                }]
              }
              myChart.setOption(optionO, true)
              myChartb.setOption(optionWT, true)
              myChartc.setOption(optionPH, true)
            },
            complete: () => {
              wepy.hideLoading()
            }
          })
        } else {
          wepy.showToast({
            title: '该塘口未绑定传感器',
            icon: 'none',
            duration: 1500
          })
        }
        this.$apply()
      },
      closemodal() {
        this.showModal = false
        this.$apply()
      },
      // 跳转到更多塘口
      jupMoreEquiment() {
        wepy.navigateTo({
          url: `myequiment`
        })
      }
    }
    events = {}
    onShow() {
      // yyyy/mm/dd
      let nowDate = new Date()
      let year = nowDate.getFullYear()
      let month = nowDate.getMonth() + 1 < 10 ? '0' + (nowDate.getMonth() + 1)
        : nowDate.getMonth() + 1
      let day = nowDate.getDate() < 10 ? '0' + nowDate.getDate() : nowDate
        .getDate()
      let hour = nowDate.getHours()
      let min = nowDate.getMinutes() < 10 ? '0' + nowDate.getMinutes() : nowDate.getMinutes()
      let dateStr = year + '/' + month + '/' + day + ' ' + hour + ':' + min
      this.time = dateStr
      console.log(this.time)
      this.$apply()
    }
    onLoad(options) {
      wepy.request({
          url: this.$parent.globalData.baseUrl + 'api/' + 'webService/checkLogin',
          data: {
            phone: this.$parent.globalData.phone
          },
          method: 'GET',
          success: res => {}
        })
      if (options.id) {
        this.ind = options.id
      }
      // 获取塘口信息
      wepy.showLoading()
      wepy.request({
        url: this.$parent.globalData.baseUrl + 'api/' + 'usermanagement/HomePageDetail',
        data: {
          relation: this.$parent.globalData.relation
        },
        method: 'GET',
        success: res => {
          // 如果有塘口
          this.tangkoulist = res.data.myHome
          wepy.connectSocket({
            url: 'wss://www.fisherymanager.net/websocket'
          })
          let relation = this.$parent.globalData.relation
          wepy.onSocketOpen((res) => {
            console.log('WebSocket连接已打开！' + res.data)
            wepy.sendSocketMessage({
              data: relation
            })
          })

          wepy.onSocketMessage((res) => {
            console.log('收到服务器内容：' + res.data)
            let data = JSON.parse(res.data)
            if (data.myHome[this.ind].sensorlist.length>0) {
              this.realTimeDataInfo = data.myHome[this.ind].sensorlist[0].sensor
            }
            // yyyy/mm/dd
            let nowDate = new Date()
            let year = nowDate.getFullYear()
            let month = nowDate.getMonth() + 1 < 10 ? '0' + (nowDate.getMonth() + 1)
              : nowDate.getMonth() + 1
            let day = nowDate.getDate() < 10 ? '0' + nowDate.getDate() : nowDate
              .getDate()
            let hour = nowDate.getHours()
            let min = nowDate.getMinutes() < 10 ? '0' + nowDate.getMinutes() : nowDate.getMinutes()
            let dateStr = year + '/' + month + '/' + day + ' ' + hour + ':' + min
            this.time = dateStr
            console.log(this.time)
            this.$apply()
          })

          if (res.data.myHome[this.ind].sensorlist.length > 0) {
            // 获取实时数据
            let deviceSn = res.data.myHome[this.ind].sensorlist[0].sensor.device_sn


            // wepy.showLoading()
            wepy.request({
              url: this.$parent.globalData.baseUrl + 'api/' + 'equipment/realTimeData',
              data: res.data.myHome[this.ind].sensorlist[0].sensor,
              method: 'GET',
              success: res => {
                this.realTimeDataInfo = res.data
                this.$apply()
              },
              complete: () => {
                // wepy.hideLoading()
              }
            })
            // 获取当天数据
            // wepy.showLoading()
            wepy.request({
              url: this.$parent.globalData.baseUrl + 'api/' + 'equipment/dataToday',
              data: {
                device_sn: deviceSn,
                way: 1
              },
              method: 'GET',
              success: res => {
                let optionO = {
                  textStyle: {
                    color: '#c4c4c4'
                  },
                  animation: false,
                  color: ['#8dc1aa'],
                  xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    data: res.data.DO.at,
                    axisLine: {
                      lineStyle: {
                        color: '#c4c4c4'
                      }
                    },
                    axisLabel: {
                      formatter: function (value) {
                        return echarts.format.formatTime('hh:mm\nMM-dd', value)
                      },
                      interval: function(index, value) {
                        let time = echarts.format.formatTime('hh:mm', value)
                        switch (time) {
                          case '00:00' : return true
                          case '03:00' : return true
                          case '06:00' : return true
                          case '09:00' : return true
                          case '12:00' : return true
                          case '15:00' : return true
                          case '18:00' : return true
                          case '21:00' : return true
                          case '24:00' : return true
                          default : return false
                        }
                      }
                    },
                    splitLine: {
                      show: false
                    }
                  }],
                  yAxis: [{
                    type: 'value',
                    axisLine: {
                      lineStyle: {
                        color: '#c4c4c4'
                      }
                    },
                    splitLine: {
                      lineStyle: {
                        color: '#e9e7de',
                        type: 'dashed'
                      }
                    },
                  }],
                  series: [{
                    lineStyle: {
                      color: '#2c90f7',
                      type: 'solid'
                    },
                    type: 'line',
                    smooth: true,
                    data: res.data.DO.value,
                    markLine: {
                      symbol: '',
                      itemStyle: {
                        lineStyle: {type: 'solid'},
                        label: {show: true, position: 'left', formatter: 'aaa'}
                      },
                      data: [
                        { yAxis: res.data.Limit?res.data.Limit.low_limit:4,
                          label: {
                            show: true,
                            formatter: '下限',
                            color: '#beac00'
                          },
                          itemStyle: {
                            color: '#beac00'
                          }
                        },
                        { yAxis: res.data.Limit?res.data.Limit.up_limit:6,
                          label: {
                            show: true,
                            formatter: '上限',
                            color: '#45795b'
                          },
                          itemStyle: {
                            color: '#45795b'
                          }
                        },
                        { yAxis: res.data.Limit?res.data.Limit.high_limit:20,
                          label: {
                            show: true,
                            formatter: '高限',
                            color: '#b3675b'
                          },
                          itemStyle: {
                            color: '#b3675b'
                          }
                        }
                      ]
                    }
                  }]
                }
                let optionWT = {
                  textStyle: {
                    color: '#c4c4c4'
                  },
                  animation: false,
                  color: ['#8dc1aa'],
                  xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    data: res.data.WT.at,
                    axisLine: {
                      lineStyle: {
                        color: '#c4c4c4'
                      }
                    },
                    splitNumber: 3,
                    axisLabel: {
                      formatter: function (value) {
                        return echarts.format.formatTime('hh:mm\nMM-dd', value)
                      },
                      interval: function(index, value) {
                        let time = echarts.format.formatTime('hh:mm', value)
                        switch (time) {
                          case '00:00' : return true
                          case '03:00' : return true
                          case '06:00' : return true
                          case '09:00' : return true
                          case '12:00' : return true
                          case '15:00' : return true
                          case '18:00' : return true
                          case '21:00' : return true
                          case '24:00' : return true
                          default : return false
                        }
                      }
                    },
                    splitLine: {
                      show: false
                    }
                  }],
                  yAxis: [{
                    type: 'value',
                    axisLine: {
                      lineStyle: {
                        color: '#c4c4c4'
                      }
                    },
                    splitLine: {
                      lineStyle: {
                        color: '#e9e7de',
                        type: 'dashed'
                      }
                    },
                  }],
                  series: [{
                    lineStyle: {
                      color: '#ff8e2d',
                      type: 'solid'
                    },
                    type: 'line',
                    smooth: true,
                    data: res.data.WT.value
                  }]
                }
                let optionPH = {
                  textStyle: {
                    color: '#c4c4c4'
                  },
                  animation: false,
                  color: ['#8dc1aa'],
                  xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    data: res.data.pH.at,
                    axisLine: {
                      lineStyle: {
                        color: '#c4c4c4'
                      }
                    },
                    splitNumber: 3,
                    axisLabel: {
                      formatter: function (value) {
                        return echarts.format.formatTime('hh:mm\nMM-dd', value)
                      },
                      interval: function(index, value) {
                        let time = echarts.format.formatTime('hh:mm', value)
                        switch (time) {
                          case '00:00' : return true
                          case '03:00' : return true
                          case '06:00' : return true
                          case '09:00' : return true
                          case '12:00' : return true
                          case '15:00' : return true
                          case '18:00' : return true
                          case '21:00' : return true
                          case '24:00' : return true
                          default : return false
                        }
                      }
                    },
                    splitLine: {
                      show: false
                    }
                  }],
                  yAxis: [{
                    type: 'value',
                    axisLine: {
                      lineStyle: {
                        color: '#c4c4c4'
                      }
                    },
                    splitLine: {
                      lineStyle: {
                        color: '#e9e7de',
                        type: 'dashed'
                      }
                    },
                  }],
                  series: [{
                    lineStyle: {
                      color: '#18b0c5',
                      type: 'solid'
                    },
                    type: 'line',
                    smooth: true,
                    data: res.data.pH.value
                  }]
                }
                myChart.setOption(optionO, true)
                myChartb.setOption(optionWT, true)
                myChartc.setOption(optionPH, true)
              },
              complete: () => {
                wepy.hideLoading()
              }
            })
          }
        },
        complete: () => {
          // wepy.hideLoading()
        }
      })
    }
    onUnload() {
      wepy.closeSocket()
      wepy.onSocketClose((res)=> {
        console.log('WebSocket 已关闭！', res)
      })
    }
}
</script>
